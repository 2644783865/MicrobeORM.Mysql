using System;
using System.Collections.Generic;
using System.Data;
using MySql.Data.MySqlClient;
using System.Linq.Expressions;
using MicrobeORM.Mysql.CommandTree;


namespace MicrobeORM.Mysql
{
    public interface IDbContext<TElement>
        where TElement:BaseEntity,new()
    {



        #region  Insert操作
        /// <summary>
        /// 插入 实体
        /// </summary>
        /// <typeparam name="TElement"></typeparam>
        /// <param name="entity"></param>
        /// <returns></returns>
        int Insert(TElement entity);


        /// <summary>
        /// 基于事务安全的插入实体集合
        /// </summary>
        /// <param name="entities"></param>
        /// <returns>返回最后插入的ID</returns>
        int InsertMulitiEntities(IEnumerable<TElement> entities);

        #endregion

        
        #region Update 更新操作
        /// <summary>
        /// 更新单个模型
        /// </summary>
        /// <typeparam name="TElement"></typeparam>
        /// <param name="entity"></param>
        /// <returns></returns>
        int Update(TElement entity);

        /// <summary>
        /// 更新元素 通过  符合条件的
        /// </summary>
        /// <typeparam name="TElement"></typeparam>
        /// <param name="predicate"></param>
        /// <returns></returns>
        int UpdateByCondition(TElement entity, Fields<TElement> hopeUpdateColumns, Expression<Func<TElement, bool>> predicate);

        #endregion


        #region Select   查询操作

        /// <summary>
        /// 通过主键获取单个元素
        /// </summary>
        /// <param name="id">Identifier</param>
        /// <returns>Entity</returns>
         TElement GetElementById(int id);

        /// <summary>
        /// 通过特定的条件查询出元素集合
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
         List<TElement> GetElementsByCondition(Expression<Func<TElement, bool>> predicate);

        /// <summary>
        /// 分页获取元素集合
        /// </summary>
        /// <param name="pageIndex">页索引</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="totalRecords">总记录数</param>
        /// <param name="totalPages">总页数</param>
        /// <param name="predicate">条件</param>
        /// <param name="sortField">排序字段</param>
        /// <param name="rule">排序规则</param>
        /// <returns></returns>
         List<TElement> GetElementsByPagerAndCondition(int pageIndex, int pageSize, out int totalRecords, out int totalPages, Expression<Func<TElement, bool>> predicate, Fields<TElement> sortField, OrderRule rule = OrderRule.ASC);
        

            #endregion


        #region Delete 删除操作

            /// <summary>
            /// 删除一个实体
            /// </summary>
            /// <param name="?"></param>
            /// <returns></returns>
            int Delete(TElement entity);

        /// <summary>
        /// 删除符合条件的实体
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        int DeleteByCondition(Expression<Func<TElement, bool>> predicate);



        #endregion


        #region 聚合函数操作

        /// <summary>
        /// 使用指定的条件 汇总列
        /// </summary>
        /// <param name="predicate"></param>
        /// <param name="specialColumn"></param>
        /// <returns></returns>
        int Sum(Expression<Func<TElement, bool>> predicate,Fields<TElement> specialColumn);

        /// <summary>
        /// 统计 符合条件的行数
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        int Count(Expression<Func<TElement, bool>> predicate);


        /// <summary>
        /// 符合条件的行的 指定列的最大值
        /// </summary>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="selector"></param>
        /// <returns></returns>
        int Max(Expression<Func<TElement, bool>> predicate, Fields<TElement> specialColumn);

        /// <summary>
        /// 符合条件的行的 指定列的最小值
        /// </summary>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="predicate"></param>
        /// <param name="specialColumn"></param>
        /// <returns></returns>
        int Min(Expression<Func<TElement, bool>> predicate, Fields<TElement> specialColumn);
        #endregion


        /// <summary>
        /// 执行SQL语句 返回查询后的结果集 
        /// Creates a raw SQL query that will return elements of the given generic type.  The type can be any type that has properties that match the names of the columns returned from the query, or can be a simple primitive type. The type does not have to be an entity type. The results of this query are never tracked by the context even if the type of object returned is an entity type.
        /// </summary>
        /// <typeparam name="TElement">The type of object returned by the query.</typeparam>
        /// <param name="sql">The SQL query string.</param>
        /// <param name="parameters">The parameters to apply to the SQL query string.</param>
        /// <returns>Result</returns>
        List<TElement> SqlQuery(string commandText, params MySqlParameter[] parameters);



        /// <summary>
        /// Execute stores procedure and load a list of entities at the end
        /// 执行存储过程，返回结果集  特定的实体集合
        /// </summary>
        /// <typeparam name="TEntity">Entity type</typeparam>
        /// <param name="commandText">Command text</param>
        /// <param name="parameters">Parameters</param>
        /// <returns>Entities</returns>
        List<TElement> ExecuteStoredProcedureList(string commandText, params MySqlParameter[] parameters);



        /// <summary>
        /// 执行SQL命令
        /// Executes the given DDL/DML command against the database.
        int ExecuteNonQuery(string cmdText, CommandType cmdType, params MySqlParameter[] commandParameters);
    }
}


